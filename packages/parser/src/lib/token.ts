import { Const } from "@sassy/util";
import { Span } from "./span";

export enum Tok {
	None         = 0b00000000_00000000_00000000_00000000,

	Comment      = 0b00000000_00000000_00000000_00000001,
	SassDoc      = 0b00000000_00000000_00000001_00000001,

	Ident        = 0b00000000_00000000_00000000_00000010,
	Keyword      = 0b00000000_00000000_00000001_00000010,
	AtWord       = 0b00000000_00000001_00000001_00000010,
	SassVar      = 0b00000000_00000000_00000010_00000010,
	CssVar       = 0b00000000_00000000_00000100_00000010,
	Selector     = 0b00000000_00000000_00001000_00000010,
	BuiltIn      = 0b00000000_00000000_00010000_00000010,
	Directive    = 0b00000000_00000000_00100000_00000010,

	Delim        = 0b00000000_00000000_00000000_00000100,
	Brace        = 0b00000000_00000000_00000001_00000100,
	Bracket      = 0b00000000_00000000_00000010_00000100,
	Paren        = 0b00000000_00000000_00000100_00000100,
	SQuote       = 0b00000000_00000000_00001000_00000100,
	DQuote       = 0b00000000_00000000_00010000_00000100,
	HashBrace    = 0b00000000_0000000_000100000_00000100,

	Punct        = 0b00000000_00000000_00000000_00001000,
	Colon        = 0b00000000_00000000_00000001_00001000,
	ColonColon   = 0b00000000_00000000_00000010_00001000,
	Semicolon    = 0b00000000_00000000_00000100_00001000,
	Dot          = 0b00000000_00000000_00001000_00001000,
	Comma        = 0b00000000_00000000_00010000_00001000,
	Hash         = 0b00000000_00000000_00100000_00001000,

	Operator     = 0b00000000_00000000_00000000_00010000,
	Plus         = 0b00000000_00000000_00000001_00010000,
	Minus        = 0b00000000_00000000_00000010_00010000,
	Equal        = 0b00000000_00000000_00000100_00010000,
	EqualEqual   = 0b00000000_00000000_00001000_00010000,
	Star         = 0b00000000_00000000_00010000_00010000,
	Slash        = 0b00000000_00000000_00100000_00010000,
	Bang         = 0b00000000_00000000_01000000_00010000,
	Caret        = 0b00000000_00000000_10000000_00010000,
	Bar          = 0b00000000_00000001_00000000_00010000,
	Tilde        = 0b00000000_00000010_00000000_00010000,
	Dollar       = 0b00000000_00000100_00000000_00010000,
	Less         = 0b00000000_00001000_00000000_00010000,
	Greater      = 0b00000000_00010000_00000000_00010000,
	Ampersand    = 0b00000000_00100000_00000000_00010000,
	StarEqual    = 0b00000000_01000000_00000000_00010000,
	BangEqual    = 0b00000000_10000000_00000000_00010000,
	CaretEqual   = 0b00000001_00000000_00000000_00010000,
	BarEqual     = 0b00000010_00000000_00000000_00010000,
	TildeEqual   = 0b00000100_00000000_00000000_00010000,
	DollarEqual  = 0b00001000_00000000_00000000_00010000,
	LessEqual    = 0b00010000_00000000_00000000_00010000,
	GreaterEqual = 0b00100000_00000000_00000000_00010000,
	And          = 0b01000000_00000000_00000000_00010000,
	Or           = 0b10000000_00000000_00000000_00010000,

	// TODO: There are a LOT of CSS units, and this will be onerous to keep up
	//       to date with the spec. Maybe just match any non-space characters
	//       after the last digit in a numeric literal?

	// Unit      = 0b00000000_00000000_00000000_00100000,
	// UnitCm    = 0b00000000_00000000_00000001_00100000,
	// UnitMm    = 0b00000000_00000000_00000010_00100000,
	// UnitQ     = 0b00000000_00000000_00000100_00100000,
	// UnitIn    = 0b00000000_00000000_00001000_00100000,
	// UnitPc    = 0b00000000_00000000_00010000_00100000,
	// UnitPt    = 0b00000000_00000000_00100000_00100000,
	// UnitPx    = 0b00000000_00000000_01000000_00100000,
	// UnitEm    = 0b00000000_00000000_10000000_00100000,
	// UnitEx    = 0b00000000_00000001_00000000_00100000,
	// UnitCh    = 0b00000000_00000010_00000000_00100000,
	// UnitRem   = 0b00000000_00000100_00000000_00100000,
	// UnitLh    = 0b00000000_00001000_00000000_00100000,
	// UnitRlh   = 0b00000000_00010000_00000000_00100000,
	// UnitVw    = 0b00000000_00100000_00000000_00100000,
	// UnitVh    = 0b00000000_01000000_00000000_00100000,
	// UnitVmin  = 0b00000000_10000000_00000000_00100000,
	// UnitVmax  = 0b00000001_00000000_00000000_00100000,
	// UnitVb    = 0b00000010_00000000_00000000_00100000,
	// UnitVi    = 0b00000100_00000000_00000000_00100000,
	// UnitSvw   = 0b00001000_00000000_00000000_00100000,
	// UnitLvw   = 0b00010000_00000000_00000000_00100000,
	// UnitSvh   = 0b00100000_00000000_00000000_00100000,
	// UnitLvh   = 0b01000000_00000000_00000000_00100000,

	NumLiteral   = 0b00000000_00000000_00000000_01000000,
	StrLiteral   = 0b00000000_00000000_00000000_10000000,

	// TODO: Need color, boolean, and null literals, but I'm out of bits and it
	//       will be a pain to << all of the modifiers by hand. Maybe automate
	//       the generation of these enum values?

	// TODO: Alternatively, make Literal the base token type and define Number,
	//       String, Color, Null, and Bool as modifiers.
}

export interface LocationParams {
	span: Span;
	offset: number;
	length: number;
}

export class Token {
	kind: Tok;
	get span(): Const<Span> { return this._span; }

	private _span: Span;
	private _off: number;
	private _len: number;

	constructor (kind: Tok, { span, offset, length }: LocationParams) {
		this.kind = kind;
		this._span = span.copy();
		this._off = offset;
		this._len = length;
	}

	lexeme(src: string): string {
		return src.substring(this._off, this._off + this._len);
	}
}
