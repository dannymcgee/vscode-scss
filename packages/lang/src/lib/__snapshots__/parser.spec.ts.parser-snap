// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Parser parses @each statements 1`] = `
(SourceFile
  (UniversalStmt
    (FlowControlStmt
      (EachStmt
        "@each" (AtEach (1:(0,5))),
        "$item" (SassVar (1:(6,11))),
        "in" (In (1:(12,14))),
        (Expression
          "$list" (SassVar (1:(15,20))),
        ),
        (Block
          "{" (LBrace (1:(21,22))),
          "}" (RBrace (1:(22,23))),
        ),
      ),
    ),
  ),
)
`;

exports[`Parser parses @each statements with destructuring 1`] = `
(SourceFile
  (UniversalStmt
    (FlowControlStmt
      (EachStmt
        "@each" (AtEach (2:(2,7))),
        "$key" (SassVar (2:(8,12))),
        "," (Comma (2:(12,13))),
        "$value" (SassVar (2:(14,20))),
        "in" (In (2:(21,23))),
        (Expression
          "$map" (SassVar (2:(24,28))),
        ),
        (Block
          "{" (LBrace (2:(29,30))),
          "}" (RBrace (2:(30,31))),
        ),
      ),
    ),
  ),
  (UniversalStmt
    (FlowControlStmt
      (EachStmt
        "@each" (AtEach (3:(2,7))),
        "$foo" (SassVar (3:(8,12))),
        "," (Comma (3:(12,13))),
        "$bar" (SassVar (3:(14,18))),
        "," (Comma (3:(18,19))),
        "$baz" (SassVar (3:(20,24))),
        "in" (In (3:(25,27))),
        (Expression
          "$lists" (SassVar (3:(28,34))),
        ),
        (Block
          "{" (LBrace (3:(35,36))),
          "}" (RBrace (3:(36,37))),
        ),
      ),
    ),
  ),
)
`;

exports[`Parser parses @if / @else if / @else statements 1`] = `
(SourceFile
  (UniversalStmt
    (FlowControlStmt
      (IfStmt
        "@if" (AtIf (2:(2,5))),
        (Expression
          "$foo" (SassVar (2:(6,10))),
        ),
        (Block
          "{" (LBrace (2:(11,12))),
          "}" (RBrace (3:(2,3))),
        ),
        (ElseClause
          "@else" (AtElse (3:(4,9))),
          "if" (If (3:(10,12))),
          (Expression
            "$bar" (SassVar (3:(13,17))),
          ),
          (Block
            "{" (LBrace (3:(18,19))),
            "}" (RBrace (4:(2,3))),
          ),
        ),
        (ElseClause
          "@else" (AtElse (4:(4,9))),
          (Block
            "{" (LBrace (4:(10,11))),
            "}" (RBrace (5:(2,3))),
          ),
        ),
      ),
    ),
  ),
)
`;

exports[`Parser parses @if / @else statements 1`] = `
(SourceFile
  (UniversalStmt
    (FlowControlStmt
      (IfStmt
        "@if" (AtIf (2:(2,5))),
        (Expression
          "$condition" (SassVar (2:(6,16))),
        ),
        (Block
          "{" (LBrace (2:(17,18))),
          "}" (RBrace (3:(2,3))),
        ),
        (ElseClause
          "@else" (AtElse (3:(4,9))),
          (Block
            "{" (LBrace (3:(10,11))),
            "}" (RBrace (4:(2,3))),
          ),
        ),
      ),
    ),
  ),
)
`;

exports[`Parser parses @if statements 1`] = `
(SourceFile
  (UniversalStmt
    (FlowControlStmt
      (IfStmt
        "@if" (AtIf (1:(0,3))),
        (Expression
          "$condition" (SassVar (1:(4,14))),
        ),
        (Block
          "{" (LBrace (1:(15,16))),
          "}" (RBrace (1:(16,17))),
        ),
      ),
    ),
  ),
)
`;

exports[`Parser parses Sass directive statements 1`] = `
(SourceFile
  (UniversalStmt
    (SassDirectiveStmt
      "@error" (AtError (2:(3,9))),
      (StringExpr
        (DQuotedStringExpr
          '"' (DQuote (2:(10,11))),
          "This" (Ident (2:(11,15))),
          "is" (Ident (2:(16,18))),
          "an" (Ident (2:(19,21))),
          "error" (Ident (2:(22,27))),
          "message" (Ident (2:(28,35))),
          '"' (DQuote (2:(35,36))),
        ),
      ),
      (Terminator
        ";" (SemiColon (2:(36,37))),
      ),
    ),
  ),
  (UniversalStmt
    (SassDirectiveStmt
      "@warn" (AtWarn (3:(3,8))),
      (StringExpr
        (DQuotedStringExpr
          '"' (DQuote (3:(9,10))),
          "This" (Ident (3:(10,14))),
          "is" (Ident (3:(15,17))),
          "a" (Ident (3:(18,19))),
          "warning" (Ident (3:(20,27))),
          "message" (Ident (3:(28,35))),
          '"' (DQuote (3:(35,36))),
        ),
      ),
      (Terminator
        ";" (SemiColon (3:(36,37))),
      ),
    ),
  ),
  (UniversalStmt
    (SassDirectiveStmt
      "@debug" (AtDebug (4:(3,9))),
      (StringExpr
        (DQuotedStringExpr
          '"' (DQuote (4:(10,11))),
          "This" (Ident (4:(11,15))),
          "is" (Ident (4:(16,18))),
          "a" (Ident (4:(19,20))),
          "debug" (Ident (4:(21,26))),
          "message" (Ident (4:(27,34))),
          '"' (DQuote (4:(34,35))),
        ),
      ),
      (Terminator
        ";" (SemiColon (4:(35,36))),
      ),
    ),
  ),
)
`;

exports[`Parser parses blocks with optional final semicolon: WITH semicolon 1`] = `
(Block
  "{" (LBrace (2:(2,3))),
  (BlockLevelStmt
    (UniversalStmt
      (VarDeclStmt
        "$foo" (SassVar (3:(3,7))),
        ":" (Colon (3:(7,8))),
        (Expression
          (StringExpr
            (DQuotedStringExpr
              '"' (DQuote (3:(9,10))),
              "foo" (Ident (3:(10,13))),
              '"' (DQuote (3:(13,14))),
            ),
          ),
        ),
        (Terminator
          ";" (SemiColon (3:(14,15))),
        ),
      ),
    ),
  ),
  (BlockLevelStmt
    (UniversalStmt
      (VarDeclStmt
        "$bar" (SassVar (4:(3,7))),
        ":" (Colon (4:(7,8))),
        (Expression
          (StringExpr
            (DQuotedStringExpr
              '"' (DQuote (4:(9,10))),
              "bar" (Ident (4:(10,13))),
              '"' (DQuote (4:(13,14))),
            ),
          ),
        ),
        (Terminator
          ";" (SemiColon (4:(14,15))),
        ),
      ),
    ),
  ),
  (BlockLevelStmt
    (UniversalStmt
      (VarDeclStmt
        "$baz" (SassVar (5:(3,7))),
        ":" (Colon (5:(7,8))),
        (Expression
          (StringExpr
            (DQuotedStringExpr
              '"' (DQuote (5:(9,10))),
              "baz" (Ident (5:(10,13))),
              '"' (DQuote (5:(13,14))),
            ),
          ),
        ),
        (Terminator
          ";" (SemiColon (5:(14,15))),
        ),
      ),
    ),
  ),
  "}" (RBrace (6:(2,3))),
)
`;

exports[`Parser parses blocks with optional final semicolon: WITHOUT semicolon 1`] = `
(Block
  "{" (LBrace (2:(2,3))),
  (BlockLevelStmt
    (UniversalStmt
      (VarDeclStmt
        "$foo" (SassVar (3:(3,7))),
        ":" (Colon (3:(7,8))),
        (Expression
          (StringExpr
            (DQuotedStringExpr
              '"' (DQuote (3:(9,10))),
              "foo" (Ident (3:(10,13))),
              '"' (DQuote (3:(13,14))),
            ),
          ),
        ),
        (Terminator
          ";" (SemiColon (3:(14,15))),
        ),
      ),
    ),
  ),
  (BlockLevelStmt
    (UniversalStmt
      (VarDeclStmt
        "$bar" (SassVar (4:(3,7))),
        ":" (Colon (4:(7,8))),
        (Expression
          (StringExpr
            (DQuotedStringExpr
              '"' (DQuote (4:(9,10))),
              "bar" (Ident (4:(10,13))),
              '"' (DQuote (4:(13,14))),
            ),
          ),
        ),
        (Terminator
          ";" (SemiColon (4:(14,15))),
        ),
      ),
    ),
  ),
  (BlockLevelStmt
    (UniversalStmt
      (VarDeclStmt
        "$baz" (SassVar (5:(3,7))),
        ":" (Colon (5:(7,8))),
        (Expression
          (StringExpr
            (DQuotedStringExpr
              '"' (DQuote (5:(9,10))),
              "baz" (Ident (5:(10,13))),
              '"' (DQuote (5:(13,14))),
            ),
          ),
        ),
        (Terminator),
      ),
    ),
  ),
  "}" (RBrace (6:(2,3))),
)
`;

exports[`Parser parses function definitions 1`] = `
(SourceFile
  (TopLevelStmt
    (FunctionDefStmt
      "@function" (AtFunction (2:(2,11))),
      "hello" (Ident (2:(12,17))),
      (Parameters
        "(" (LParen (2:(17,18))),
        (Parameter
          "$name" (SassVar (2:(18,23))),
        ),
        ")" (RParen (2:(23,24))),
      ),
      (Block
        "{" (LBrace (2:(25,26))),
        (BlockLevelStmt
          (ReturnStmt
            "@return" (AtReturn (3:(3,10))),
            (Expression
              (StringExpr
                (DQuotedStringExpr
                  '"' (DQuote (3:(11,12))),
                  "Hello" (Ident (3:(12,17))),
                  "," (Comma (3:(17,18))),
                  "#{" (HashBrace (3:(19,21))),
                  "$name" (SassVar (3:(21,26))),
                  "}" (RBrace (3:(26,27))),
                  "!" (Bang (3:(27,28))),
                  '"' (DQuote (3:(28,29))),
                ),
              ),
            ),
            (Terminator
              ";" (SemiColon (3:(29,30))),
            ),
          ),
        ),
        "}" (RBrace (4:(2,3))),
      ),
    ),
  ),
)
`;

exports[`Parser parses import statements 1`] = `
(SourceFile
  (TopLevelStmt
    (ImportStmt
      "@import" (AtImport (1:(0,7))),
      (StringExpr
        (DQuotedStringExpr
          '"' (DQuote (1:(8,9))),
          "path" (Ident (1:(9,13))),
          "/" (Slash (1:(13,14))),
          "to" (Keyword (1:(14,16))),
          "/" (Slash (1:(16,17))),
          "stylesheet" (Ident (1:(17,27))),
          "." (Dot (1:(27,28))),
          "css" (Ident (1:(28,31))),
          '"' (DQuote (1:(31,32))),
        ),
      ),
      (Terminator
        ";" (SemiColon (1:(32,33))),
      ),
    ),
  ),
)
`;

exports[`Parser parses mixin definitions with empty param lists 1`] = `
(SourceFile
  (TopLevelStmt
    (MixinDefStmt
      "@mixin" (AtMixin (1:(0,6))),
      "foo" (Ident (1:(7,10))),
      (Parameters
        "(" (LParen (1:(10,11))),
        ")" (RParen (1:(11,12))),
      ),
      (Block
        "{" (LBrace (1:(13,14))),
        "}" (RBrace (1:(14,15))),
      ),
    ),
  ),
)
`;

exports[`Parser parses module load statements 1`] = `
(SourceFile
  (TopLevelStmt
    (ModuleLoadStmt
      "@use" (AtUse (1:(0,4))),
      (StringExpr
        (DQuotedStringExpr
          '"' (DQuote (1:(5,6))),
          "sass" (Ident (1:(6,10))),
          ":" (Colon (1:(10,11))),
          "math" (Ident (1:(11,15))),
          '"' (DQuote (1:(15,16))),
        ),
      ),
      (Terminator
        ";" (SemiColon (1:(16,17))),
      ),
    ),
  ),
)
`;

exports[`Parser parses parameter lists 1`] = `
(Parameters
  "(" (LParen (1:(0,1))),
  (Parameter
    "$foo" (SassVar (1:(1,5))),
  ),
  "," (Comma (1:(5,6))),
  (Parameter
    "$bar" (SassVar (1:(7,11))),
  ),
  "," (Comma (1:(11,12))),
  (Parameter
    "$baz" (SassVar (1:(13,17))),
  ),
  "..." (Ellipsis (1:(17,20))),
  ")" (RParen (1:(20,21))),
)
`;

exports[`Parser parses parameterized mixin definitions 1`] = `
(SourceFile
  (TopLevelStmt
    (MixinDefStmt
      "@mixin" (AtMixin (1:(0,6))),
      "foo" (Ident (1:(7,10))),
      (Parameters
        "(" (LParen (1:(10,11))),
        (Parameter
          "$bar" (SassVar (1:(11,15))),
        ),
        "," (Comma (1:(15,16))),
        (Parameter
          "$baz" (SassVar (1:(17,21))),
        ),
        ")" (RParen (1:(21,22))),
      ),
      (Block
        "{" (LBrace (1:(23,24))),
        "}" (RBrace (1:(24,25))),
      ),
    ),
  ),
)
`;

exports[`Parser parses parameters with a trailing comma 1`] = `
(Parameters
  "(" (LParen (2:(2,3))),
  (Parameter
    "$foo" (SassVar (3:(3,7))),
  ),
  "," (Comma (3:(7,8))),
  (Parameter
    "$bar" (SassVar (4:(3,7))),
  ),
  "," (Comma (4:(7,8))),
  (Parameter
    "$baz" (SassVar (5:(3,7))),
  ),
  "," (Comma (5:(7,8))),
  ")" (RParen (6:(2,3))),
)
`;

exports[`Parser parses parameters with default values 1`] = `
(Parameters
  "(" (LParen (1:(0,1))),
  (Parameter
    "$foo" (SassVar (1:(1,5))),
  ),
  "," (Comma (1:(5,6))),
  (Parameter
    "$bar" (SassVar (1:(7,11))),
    ":" (Colon (1:(11,12))),
    (Expression
      (StringExpr
        (DQuotedStringExpr
          '"' (DQuote (1:(13,14))),
          "hello" (Ident (1:(14,19))),
          '"' (DQuote (1:(19,20))),
        ),
      ),
    ),
  ),
  ")" (RParen (1:(20,21))),
)
`;

exports[`Parser parses simple mixin definitions 1`] = `
(SourceFile
  (TopLevelStmt
    (MixinDefStmt
      "@mixin" (AtMixin (1:(0,6))),
      "foo" (Ident (1:(7,10))),
      (Block
        "{" (LBrace (1:(11,12))),
        "}" (RBrace (1:(12,13))),
      ),
    ),
  ),
)
`;

exports[`Parser parses variable declaration statements 1`] = `
(SourceFile
  (UniversalStmt
    (VarDeclStmt
      "$hello" (SassVar (1:(0,6))),
      ":" (Colon (1:(6,7))),
      (Expression
        (StringExpr
          (DQuotedStringExpr
            '"' (DQuote (1:(8,9))),
            "Hello" (Ident (1:(9,14))),
            "," (Comma (1:(14,15))),
            "world" (Ident (1:(16,21))),
            "!" (Bang (1:(21,22))),
            '"' (DQuote (1:(22,23))),
          ),
        ),
      ),
      (Terminator
        ";" (SemiColon (1:(23,24))),
      ),
    ),
  ),
)
`;
