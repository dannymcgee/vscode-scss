SourceFile
	= ( UniversalStmt | TopLevelStmt )*
	;

UniversalStmt
	= VarDeclStmt
#	| FlowControlStmt
	| SassDirectiveStmt
	;

TopLevelStmt
	= ModuleLoadStmt
	| ImportStmt
	| MixinDefStmt
	| FunctionDefStmt
	;

VarDeclStmt
	= Token.SassVar Token.Colon Expression Token.SemiColon
	;

SassDirectiveStmt
	= ( Token.AtError | Token.AtWarn | Token.AtDebug )
		QuotedStringExpr
		Token.SemiColon
	;

ModuleLoadStmt
	= Token.AtUse
		QuotedStringExpr
		( Token.As ( Token.Ident | Token.Star ) )?
		Token.SemiColon
	;

ImportStmt
	= Token.AtImport StringExpr Token.SemiColon
	;

MixinDefStmt
	= Token.AtMixin Token.Ident ( Parameters )? RuleBlock
	;

FunctionDefStmt
	= Token.AtFunction Token.Ident Parameters FunctionBody
	;

ReturnStmt
	= Token.AtReturn Expression
	;

Parameters
	= Token.LParen
		( Parameter
			( Token.Comma Parameter )*
			( Token.Comma )?
		)?
		Token.RParen
	;

Parameter
	= Token.SassVar ( Token.Colon Expression )?
	;

RuleBlock
	= Token.LBrace
#		(( UniversalStmt | CssStmt )
#			( Token.SemiColon ( UniversalStmt | CssStmt ))*
#			( Token.SemiColon )?
#		)?
		Token.RBrace
	;

FunctionBody
	= Token.LBrace
		(( UniversalStmt | ReturnStmt )
			( Token.SemiColon ( UniversalStmt | ReturnStmt ))*
			( Token.SemiColon )?
		)?
		Token.RBrace
	;

Expression
	= StringExpr
	;

StringExpr
	= QuotedStringExpr | UnquotedStringExpr
	;

QuotedStringExpr
	= SQuotedStringExpr | DQuotedStringExpr
	;

SQuotedStringExpr
	= Token.SQuote ( ~Token.SQuote )* Token.SQuote
	;

DQuotedStringExpr
	= Token.DQuote ( ~Token.DQuote )* Token.DQuote
	;

UnquotedStringExpr
	= ( ~Token.SemiColon )+
	;
